generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id     String @id @default(cuid())
  // Om du vill koppla beställningen till en användare:
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Du kan välja att lagra en lista med produkter som JSON,
  // eller bygga ut med en relationstabell OrderItem.
  items Json

  total     Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified Boolean
  image         String?
  isAdmin       Boolean   @default(false) // Ny egenskap för att markera admin-status
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  orders        Order[]

  @@map("user")
}

model Product {
  id            String     @id @default(cuid())
  articleNumber String     @unique
  image         String
  title         String
  description   String
  price         Float // Använder Float istället för Decimal eftersom du använder number i TS
  categories    Category[] @relation("ProductCategories")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
